package com.fct.photo_organizer.ui;

import com.fct.photo_organizer.service.file.FileService;
import com.fct.photo_organizer.service.image.ImageService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.plaf.basic.BasicArrowButton;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

public class PhotoViewerForm {
    JPanel photoViewerFormPanel;
    JButton selectSourceDirectoryButton;
    JList<File> sourceImageList;
    private JScrollPane sourceImageScrollPanel;
    JLabel showImageLabel;
    JPanel showImagePanel;
    JButton nextImageButton;
    JButton previousImageButton;
    private JPanel imageNavigationPanel;
    private JPanel assignmentPanel;
    private JPanel addChildPanel;
    private JLabel addChildLabel;
    JTextField addChildTextField;
    JButton addChildButton;
    private JPanel selectSourceDirectoryPanel;
    private JScrollPane assignToChildrenScrollPanel;
    SourceDirectoryFileChooser sourceDirectoryFileChooser;

    private FileService fileService;
    private ImageService imageService;

    PhotoViewerForm(FileService fileService, ImageService imageService) {

        this.fileService = fileService;
        this.imageService = imageService;
    }

    void init() {

        initSourceDirectoryFileChooser();
        initSourceImageList();
        initSelectSourceDirectoryButton();
        initImageNavigationButtons();
        initAddChildTextField();
    }

    private void initSourceDirectoryFileChooser() {

        sourceDirectoryFileChooser = createSourceDirectoryFileChooser();
        sourceDirectoryFileChooser.init();
    }

    private void initSourceImageList() {

        sourceImageList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        sourceImageList.setCellRenderer(createSourceImageListCellRenderer());
        sourceImageList.addListSelectionListener(createSourceImageListSelectionListener());
    }

    private void initSelectSourceDirectoryButton() {

        selectSourceDirectoryButton.addActionListener(createSelectSourceDirectoryButtonActionListener());
    }

    private void initImageNavigationButtons() {

        previousImageButton.addActionListener(createPreviousImageButtonActionListener());
        nextImageButton.addActionListener(createNextImageButtonActionListener());
    }

    private void initAddChildTextField() {

        addChildTextField.getDocument().addDocumentListener(createAddChildTextFieldDocumentListener());
    }

    SourceDirectoryFileChooser createSourceDirectoryFileChooser() {
        return new SourceDirectoryFileChooser();
    }

    SourceImageListCellRenderer createSourceImageListCellRenderer() {
        return new SourceImageListCellRenderer();
    }

    SourceImageListSelectionListener createSourceImageListSelectionListener() {
        return new SourceImageListSelectionListener();
    }

    SelectSourceDirectoryButtonActionListener createSelectSourceDirectoryButtonActionListener() {
        return new SelectSourceDirectoryButtonActionListener();
    }

    NextImageButtonActionListener createNextImageButtonActionListener() {
        return new NextImageButtonActionListener();
    }

    PreviousImageButtonActionListener createPreviousImageButtonActionListener() {
        return new PreviousImageButtonActionListener();
    }

    AddChildTextFieldDocumentListener createAddChildTextFieldDocumentListener() {
        return new AddChildTextFieldDocumentListener();
    }

    JPanel getPhotoViewerFormPanel() {

        return photoViewerFormPanel;
    }

    void createUIComponents() {
        nextImageButton = new BasicArrowButton(BasicArrowButton.SOUTH);
        previousImageButton = new BasicArrowButton(BasicArrowButton.NORTH);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        photoViewerFormPanel = new JPanel();
        photoViewerFormPanel.setLayout(new GridLayoutManager(2, 5, new Insets(10, 10, 10, 10), -1, -1));
        sourceImageScrollPanel = new JScrollPane();
        photoViewerFormPanel.add(sourceImageScrollPanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, 600), new Dimension(150, 600), new Dimension(150, 600), 0, false));
        sourceImageList = new JList();
        sourceImageList.setSelectionMode(2);
        sourceImageScrollPanel.setViewportView(sourceImageList);
        showImagePanel = new JPanel();
        showImagePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        photoViewerFormPanel.add(showImagePanel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(800, 600), new Dimension(800, 600), new Dimension(800, 600), 0, false));
        showImageLabel = new JLabel();
        showImageLabel.setText("");
        showImagePanel.add(showImageLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(146, 0), null, 0, false));
        imageNavigationPanel = new JPanel();
        imageNavigationPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        photoViewerFormPanel.add(imageNavigationPanel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        previousImageButton.setEnabled(false);
        previousImageButton.setText("Button");
        imageNavigationPanel.add(previousImageButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextImageButton.setEnabled(false);
        nextImageButton.setText("Button");
        imageNavigationPanel.add(nextImageButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        assignmentPanel = new JPanel();
        assignmentPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        photoViewerFormPanel.add(assignmentPanel, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(250, 600), new Dimension(250, 600), new Dimension(250, 600), 0, false));
        addChildPanel = new JPanel();
        addChildPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        assignmentPanel.add(addChildPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addChildLabel = new JLabel();
        addChildLabel.setText("Add child");
        addChildPanel.add(addChildLabel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addChildTextField = new JTextField();
        addChildPanel.add(addChildTextField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, -1), new Dimension(200, -1), new Dimension(200, -1), 0, false));
        addChildButton = new JButton();
        addChildButton.setEnabled(false);
        addChildButton.setHorizontalTextPosition(11);
        addChildButton.setText("+");
        addChildPanel.add(addChildButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(30, 26), new Dimension(30, 26), new Dimension(30, 26), 0, false));
        assignToChildrenScrollPanel = new JScrollPane();
        assignmentPanel.add(assignToChildrenScrollPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectSourceDirectoryPanel = new JPanel();
        selectSourceDirectoryPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        photoViewerFormPanel.add(selectSourceDirectoryPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectSourceDirectoryButton = new JButton();
        selectSourceDirectoryButton.setHorizontalAlignment(2);
        selectSourceDirectoryButton.setHorizontalTextPosition(0);
        selectSourceDirectoryButton.setText("Select...");
        selectSourceDirectoryPanel.add(selectSourceDirectoryButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return photoViewerFormPanel;
    }

    class SelectSourceDirectoryButtonActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {

            if (sourceDirectoryFileChooser.showOpenDialog(photoViewerFormPanel) == JFileChooser.APPROVE_OPTION) {

                File sourceDirectory = sourceDirectoryFileChooser.getSelectedFile();

                File[] images = fileService.getImageFilesInDirectory(sourceDirectory);

                sourceImageList.setListData(images);

                if (images.length > 0) {
                    sourceImageList.setSelectedIndex(0);
                } else {
                    sourceImageList.clearSelection();
                }
            }
        }
    }

    static class SourceImageListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object file, int fileIndex, boolean isSelected, boolean cellHasFocus) {

            JLabel cellRendererLabel = getSuperListCellRendererComponent(list, file, fileIndex, isSelected, cellHasFocus);

            cellRendererLabel.setText(((File) file).getName());

            return cellRendererLabel;
        }

        JLabel getSuperListCellRendererComponent(JList list, Object file, int fileIndex, boolean isSelected, boolean cellHasFocus) {
            return (JLabel) super.getListCellRendererComponent(list, file, fileIndex, isSelected, cellHasFocus);
        }
    }

    class SourceImageListSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent event) {

            JList<File> imageList = (JList<File>) event.getSource();

            ImageIcon imageIcon = loadImageIcon(imageList);

            enableDisablePreviousImageButton(imageList);
            enableDisableNextImageButton(imageList);

            showImageLabel.setIcon(imageIcon);
        }

        private void enableDisablePreviousImageButton(JList<File> imageList) {

            int selectedIndex = imageList.getSelectedIndex();

            int listSize = imageList.getModel().getSize();

            previousImageButton.setEnabled((listSize > 1) && (selectedIndex != 0));
        }

        private void enableDisableNextImageButton(JList<File> imageList) {

            int selectedIndex = imageList.getSelectedIndex();

            int listSize = imageList.getModel().getSize();

            nextImageButton.setEnabled((listSize > 1) && (listSize - 1 != selectedIndex));
        }

        private ImageIcon loadImageIcon(JList<File> imageList) {

            File selectedImageFile = imageList.getSelectedValue();

            ImageIcon imageIcon = null;

            if (selectedImageFile != null) {
                try {

                    int showImagePanelWidth = showImagePanel.getWidth();
                    int showImagePanelHeight = showImagePanel.getHeight();

                    imageIcon = imageService.loadImageIcon(selectedImageFile, showImagePanelWidth, showImagePanelHeight);

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(photoViewerFormPanel, "An error happened during loading the image!",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            return imageIcon;
        }
    }

    class PreviousImageButtonActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {

            int currentSelectedIndex = sourceImageList.getSelectedIndex();

            sourceImageList.setSelectedIndex(currentSelectedIndex - 1);
        }
    }

    class NextImageButtonActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {

            int currentSelectedIndex = sourceImageList.getSelectedIndex();

            sourceImageList.setSelectedIndex(currentSelectedIndex + 1);
        }
    }

    class AddChildTextFieldDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent event) {

            if (addChildTextField.getDocument().getLength() == 1) {

                addChildButton.setEnabled(true);
            }
        }

        @Override
        public void removeUpdate(DocumentEvent event) {

            if (addChildTextField.getDocument().getLength() == 0) {

                addChildButton.setEnabled(false);
            }
        }

        @Override
        public void changedUpdate(DocumentEvent event) {
        }
    }
}
