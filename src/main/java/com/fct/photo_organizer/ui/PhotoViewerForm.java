package com.fct.photo_organizer.ui;

import com.fct.photo_organizer.service.file.FileService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class PhotoViewerForm {
    JPanel photoViewerFormPanel;
    JButton selectSourceDirectoryButton;
    JList<File> sourceImageList;
    private JScrollPane sourceImageScrollPanel;
    SourceDirectoryFileChooser sourceDirectoryFileChooser;

    private FileService fileService;

    PhotoViewerForm(FileService fileService) {

        this.fileService = fileService;
    }

    void init() {

        initSourceDirectoryFileChooser();
        initSourceImageList();
        initSelectSourceDirectoryButton();
    }

    private void initSourceDirectoryFileChooser() {

        sourceDirectoryFileChooser = createSourceDirectoryFileChooser();
        sourceDirectoryFileChooser.init();
    }

    private void initSourceImageList() {

        sourceImageList.setCellRenderer(createSourceImageListCellRenderer());
    }

    private void initSelectSourceDirectoryButton() {

        selectSourceDirectoryButton.addActionListener(createSelectSourceDirectoryButtonActionListener(fileService));
    }

    SourceDirectoryFileChooser createSourceDirectoryFileChooser() {
        return new SourceDirectoryFileChooser();
    }

    SourceImageListCellRenderer createSourceImageListCellRenderer() {
        return new SourceImageListCellRenderer();
    }

    SelectSourceDirectoryButtonActionListener createSelectSourceDirectoryButtonActionListener(FileService fileService) {
        return new SelectSourceDirectoryButtonActionListener(fileService);
    }

    JPanel getPhotoViewerFormPanel() {

        return photoViewerFormPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        photoViewerFormPanel = new JPanel();
        photoViewerFormPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        sourceImageScrollPanel = new JScrollPane();
        photoViewerFormPanel.add(sourceImageScrollPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        sourceImageList = new JList();
        sourceImageScrollPanel.setViewportView(sourceImageList);
        selectSourceDirectoryButton = new JButton();
        selectSourceDirectoryButton.setText("Select...");
        photoViewerFormPanel.add(selectSourceDirectoryButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return photoViewerFormPanel;
    }

    class SelectSourceDirectoryButtonActionListener implements ActionListener {

        private FileService fileService;

        public SelectSourceDirectoryButtonActionListener(FileService fileService) {
            this.fileService = fileService;
        }

        @Override
        public void actionPerformed(ActionEvent event) {

            if (sourceDirectoryFileChooser.showOpenDialog(photoViewerFormPanel) == JFileChooser.APPROVE_OPTION) {

                File sourceDirectory = sourceDirectoryFileChooser.getSelectedFile();

                File[] images = fileService.getImageFilesInDirectory(sourceDirectory);

                sourceImageList.setListData(images);
            }
        }
    }

    static class SourceImageListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object file, int fileIndex, boolean isSelected, boolean cellHasFocus) {

            JLabel cellRendererLabel = getSuperListCellRendererComponent(list, file, fileIndex, isSelected, cellHasFocus);

            cellRendererLabel.setText(((File) file).getName());

            return cellRendererLabel;
        }

        JLabel getSuperListCellRendererComponent(JList list, Object file, int fileIndex, boolean isSelected, boolean cellHasFocus) {
            return (JLabel) super.getListCellRendererComponent(list, file, fileIndex, isSelected, cellHasFocus);
        }
    }
}
